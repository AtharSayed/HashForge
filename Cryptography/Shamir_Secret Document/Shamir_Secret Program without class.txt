// C++ implementation of shamirâ€™s secret algorithm 
#include<iostream>
#include<vector>
#include<cmath>
using namespace std;
	
// Function to calculate the value of y (y = poly[0] + x*poly[1] + x^2*poly[2] + ...)
int calculate_Y(int x, vector<int>& poly)
{
	// Initializing y
	int y = 0;
	int temp = 1;

	// Iterating through the array
	for (auto coeff : poly) {
		// Computing the value of y
		y = (y + (coeff * temp));
		temp = (temp * x);

	}
	return y;
}

void secret_sharing(int S, vector<pair<int, int> >& points,
	int N, int K)
{
	vector<int> poly(K);
	poly[0] = S;

	for (int j = 1; j < K; ++j) {
		int p = 0;
		while (p == 0)

			p = (rand() % 997);
		poly[j] = p;
	}

	for (int j = 1; j <= N; ++j) {
		int x = j;
		int y = calculate_Y(x, poly);

		// Points created on sharing
		points[j - 1] = { x, y };
	}
}
struct fraction {
	int num, den;
	fraction(int n, int d)
	{
		num = n, den = d;
	}

	int gcd(int a, int b) {
		while (b != 0) {
			int t = b;
			b = a % b;
			a = t;
		}
		return a;
	}

	void reduce_fraction(fraction& f)
	{
		int gcd_value = gcd(f.num, f.den);
		f.num /= gcd_value, f.den /= gcd_value;
	}

	fraction operator*(fraction f)
	{
		fraction temp(num * f.num, den * f.den);
		reduce_fraction(temp);
		return temp;
	}

	fraction operator+(fraction f)
	{
		fraction temp(num * f.den + den * f.num,
			den * f.den);

		reduce_fraction(temp);
		return temp;
	}
};

int Generate_Secret(int x[], int y[], int M)
{
	fraction ans(0, 1);
	// Loop to iterate through the given
	// points
	for (int i = 0; i < M; ++i) {

		// Initializing the fraction
		fraction l(y[i], 1);
		for (int j = 0; j < M; ++j) {

			// Computing the lagrange terms
			if (i != j) {
				fraction temp(-x[j], x[i] - x[j]);
				l = l * temp;
			}
		}
		ans = ans + l;
	}
	// Return the secret
	return ans.num;
}

void operation(int S, int N, int K)
{
	// Vector to store the points
	vector<pair<int, int> > points(N);

	// Sharing of secret Code in N parts
	secret_sharing(S, points, N, K);

	cout << "Secret is divided to " << N
		<< " Parts - " << endl;

	for (int i = 0; i < N; ++i) {
		cout << points[i].first << " "
			<< points[i].second << endl;
	}

	cout << "We can generate Secret from any of "
		<< K << " Parts" << endl;

	int M = 2;

	if (M < K) {
		cout << "Points are less than threshold "
			<< K << " Points Required" << endl;
	}

	int* x = new int[M];
	int* y = new int[M];

	for (int i = 0; i < M; ++i) {
		x[i] = points[i].first;
		y[i] = points[i].second;
	}

	// Get back our result again.
	cout << "Our Secret Code is : "
		<< Generate_Secret(x, y, M) << endl;
}

int main()
{

	int S, N, K;
	cout<<"                                      SHAMIR SECRET SHARING ALGORITHM   "<<endl;
	cout << "Enter the secret key :";
	cin >> S;
	cout << "Enter the number of shares : ";
	cin >> N;
	cout << "Enter the minimum required shares: ";
	cin >> K;

	operation(S, N, K);
	return 0;

}
