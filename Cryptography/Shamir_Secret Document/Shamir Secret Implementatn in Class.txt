#include<iostream>
#include<vector>
#include<cmath>
using namespace std;

class SSA {
private:
    int S, N, K;
    vector<pair<int, int>> points;

    // Function to calculate the value of y (y = poly[0] + x*poly[1] + x^2*poly[2] + ...)
    int calculate_Y(int x, vector<int>& poly)
    {

      // Declaring y 
        int y = 0;
        int temp = 1;

        // Iterating through the array
        for (auto coeff : poly) {
            // Computing the value of y
            y = (y + (coeff * temp));
            temp = (temp * x);
        }
        return y;
    }

    void secret_sharing()
    {
        vector<int> poly(K);
        poly[0] = S;

        for (int j = 1; j < K; ++j) {
            int p = 0;
            while (p == 0)
                p = (rand() % 997);
            poly[j] = p;
        }

        for (int j = 1; j <= N; ++j) {
            int x = j;
            int y = calculate_Y(x, poly);

            // Points created on sharing
            points[j - 1] = { x, y };
        }
    }

public:
    int Generate_Secret(int x[], int y[], int M)
    {
        struct fraction {
            int num, den;
            fraction(int n, int d)
            {
                num = n, den = d;
            }

            int gcd(int a, int b) {
                while (b != 0) {
                    int t = b;
                    b = a % b;
                    a = t;
                }
                return a;
            }

            void reduce_fraction(fraction& f)
            {
                int gcd_value = gcd(f.num, f.den);
                f.num /= gcd_value, f.den /= gcd_value;
            }

            fraction operator*(fraction f)
            {
                fraction temp(num * f.num, den * f.den);
                reduce_fraction(temp);
                return temp;
            }

            fraction operator+(fraction f)
            {
                fraction temp(num * f.den + den * f.num,
                    den * f.den);

                reduce_fraction(temp);
                return temp;
            }	
        };

        fraction ans(0, 1);
        // Loop to iterate through the given
        // points
        for (int i = 0; i < M; ++i) {

            // Initializing the fraction
            fraction l(y[i], 1);
            for (int j = 0; j < M; ++j) {

                // Computing the lagrange terms
                if (i != j) {
                    fraction temp(-x[j], x[i] - x[j]);
                    l = l * temp;
                }
            }
            ans = ans + l;
        }
        // Return the secret
        return ans.num;
    }

public:
    SSA(int s, int n, int k) : S(s), N(n), K(k), points(n)
    {
        secret_sharing();
    }

    void operation()
    {
        cout << "Secret is divided to " << N
            << " Parts - " << endl;

        for (int i = 0; i < N; ++i) {
            cout << points[i].first << " " << points[i].second << endl;
        }

        cout << "We can generate Secret from any of "
            << K << " Parts" << endl;
    }
};
int main()
{
    int secret, n, k;
    cout << "                                      SHAMIR SECRET SHARING ALGORITHM   " << endl;
    cout << "Enter the secret key :";
    cin >> secret;
    cout << "Enter the number of shares : ";
    cin >> n;
    cout << "Enter the minimum required shares: ";
    cin >> k;

    // Create SSA object
    SSA ssa(secret, n, k);

    // Perform secret sharing
    ssa.operation();

    // Generate secret from shares
    int x[] = { 1, 3, 4 };
    int y[] = { 14, 60, 123 };
    int m = 3;
    int reconstructed_secret = ssa.Generate_Secret(x, y, m);
    cout << "Reconstructed secret: " << reconstructed_secret << endl;

    return 0;
}
